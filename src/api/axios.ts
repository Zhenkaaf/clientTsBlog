import axios from "axios";
/* import store from "../redux/store"; // <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø—É—Ç—å –∫ store
import { logout } from "../redux/auth/authSlice";
 */
const instance = axios.create({
    /*  baseURL: "http://localhost:5000/api", */
    baseURL: "https://serverexpresstsblog.onrender.com/api",
});

// üì§ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
instance.interceptors.request.use((config) => {
    const token = localStorage.getItem("tokenAutovibe");
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

/* // üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
instance.interceptors.response.use(
    (response) => response, // –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç
    (error) => {
        const status = error.response?.status;
        const message = error.response?.data?.message;

        if (status === 403 && message?.toLowerCase().includes("token")) {
            console.warn("Token invalid or expired ‚Äî logging out...");

            // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
            localStorage.removeItem("tokenAutovibe");

            // –í—ã–∑—ã–≤–∞–µ–º logout –∏–∑ authSlice
            store.dispatch(logout());

            // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            window.location.href = "/login";
        }

        // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –≤ thunk –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        return Promise.reject(error);
    }
); */

export default instance;
