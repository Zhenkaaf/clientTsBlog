import { Store } from "@reduxjs/toolkit";
import axios from "axios";
import { RootState } from "../redux/store";

const myAxios = axios.create({
    /*  baseURL: "http://localhost:5000/api", */
    baseURL: "https://serverexpresstsblog.onrender.com/api",
});

// üì§ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
/* instance.interceptors.request.use((config) => {
    const token = localStorage.getItem("tokenAutovibe");
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
}); */

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Redux store
export const setupAxiosInterceptors = (storeInstance: Store<RootState>) => {
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º store –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    myAxios.interceptors.request.use(
        (config) => {
            const state = storeInstance.getState(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π storeInstance
            const token = state.auth.token;

            if (token) {
                config.headers.Authorization = `Bearer ${token}`;
            }
            return config;
        },
        (error) => {
            return Promise.reject(error);
        }
    );

    /* // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    myAxios.interceptors.response.use(
        (response) => {
            return response;
        },
        async (error) => {
            const originalRequest = error.config;
            if (
                error.response?.status === 401 &&
                !originalRequest._retry &&
                !originalRequest.url.includes("/auth/login") &&
                !originalRequest.url.includes("/auth/register")
            ) {
                originalRequest._retry = true;

                console.log("Received 401 Unauthorized from API. Logging out.");
                storeInstance.dispatch(logout()); // –î–∏—Å–ø–∞—Ç—á–∏–º logout —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π storeInstance

                return Promise.reject(error);
            }
            return Promise.reject(error);
        }
    ); */
};

/* // üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
instance.interceptors.response.use(
    (response) => response, // –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç
    (error) => {
        const status = error.response?.status;
        const message = error.response?.data?.message;

        if (status === 403 && message?.toLowerCase().includes("token")) {
            console.warn("Token invalid or expired ‚Äî logging out...");

            // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
            localStorage.removeItem("tokenAutovibe");

            // –í—ã–∑—ã–≤–∞–µ–º logout –∏–∑ authSlice
            store.dispatch(logout());

            // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            window.location.href = "/login";
        }

        // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –≤ thunk –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        return Promise.reject(error);
    }
); */

export default myAxios;
